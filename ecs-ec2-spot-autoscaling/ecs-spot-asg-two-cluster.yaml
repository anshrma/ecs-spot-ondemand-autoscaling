AWSTemplateFormatVersion: 2010-09-09
Description: ECS on spot instances example
Mappings:
  ecsoptimizedami:
    us-west-2:
      ami: ami-c6f81abe
Metadata:
  Authors:
    Description: anshrma@amazon.com
  License:
    Description: 'Copyright 2017 Amazon.com, Inc. and its affiliates. All Rights Reserved.

      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at

      http://aws.amazon.com/asl/

      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'
Parameters:
  Environment:
    Default: dev
    Description: Environment
    Type: String
  ecsClusterTargetCapacity:
    Default: 2
    Description: Number of EC2 Spot instances to initially launch in the ECS cluster
    Type: Number
  keyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
  spotBidPrice:
    Default: 0.05
    Description: Spot Instance bid price
    Type: String
  instanceType:
    Default: c3.large
    Description: Instance Type
    Type: String

Resources:
  cloudWatchLogsGroup:
    Properties:
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup

  ecsCluster:
    Type: AWS::ECS::Cluster
  ecsClusterSpot:
    Type: AWS::ECS::Cluster

# Security Groups Start here
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG on ALB
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0 # Change this to restrict the traffic
          IpProtocol: TCP
          FromPort: 80
          ToPort: 80
      VpcId: !Ref VPC
  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG on Instance
      VpcId: !Ref VPC
  ALBToInstanceEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:  !GetAtt InstanceSG.GroupId
      FromPort: -1
      GroupId: !GetAtt ALBSG.GroupId
      IpProtocol: -1
      ToPort: -1
  InstanceIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: -1
      GroupId: !GetAtt InstanceSG.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt ALBSG.GroupId
      ToPort: -1
# Security Groups End here

  snsTopic:
    Type: AWS::SNS::Topic
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} - ECS Host
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: Pricing
          Value: OnDemand
          PropagateAtLaunch: true


    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap [ecsoptimizedami,!Ref "AWS::Region", ami]
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref spotFleetInstanceProfile
      KeyName: !Ref keyName
      SecurityGroups:
        - !Ref InstanceSG
      UserData:
            Fn::Base64: !Sub |
              #!/bin/bash -xe
              export PATH=/usr/local/bin:$PATH
              yum -y --security update
              yum -y install jq
              yum install -y aws-cfn-bootstrap
              easy_install pip
              pip install awscli
              aws configure set default.region ${AWS::Region}
              echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config
              echo ECS_ENABLE_TASK_IAM_ROLE=true >> /etc/ecs/ecs.config
              echo ECS_INSTANCE_ATTRIBUTES={\"instance-purchase-option\":\"ondemand\"} >> /etc/ecs/ecs.config

              cat <<EOF > /tmp/awslogs.conf

              [general]
              state_file = /var/awslogs/state/agent-state

              [/var/log/dmesg]
              file = /var/log/dmesg
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/dmesg
              initial_position = start_of_file

              [/var/log/messages]
              file = /var/log/messages
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/messages
              datetime_format = %b %d %H:%M:%S
              initial_position = start_of_file

              [/var/log/docker]
              file = /var/log/docker
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/docker
              datetime_format = %Y-%m-%dT%H:%M:%S.%f
              initial_position = start_of_file


              [/var/log/ecs/ecs-init.log]
              file = /var/log/ecs/ecs-init.log.*
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-init.log
              datetime_format = %Y-%m-%dT%H:%M:%SZ
              initial_position = start_of_file


              [/var/log/ecs/ecs-agent.log]
              file = /var/log/ecs/ecs-agent.log.*
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-agent.log
              datetime_format = %Y-%m-%dT%H:%M:%SZ
              initial_position = start_of_file


              [/var/log/ecs/audit.log]
              file = /var/log/ecs/audit.log.*
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/audit.log
              datetime_format = %Y-%m-%dT%H:%M:%SZ
              initial_position = start_of_file
              EOF


              cd /tmp && curl -sO https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
              python /tmp/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/awslogs.conf


              cat <<EOF > /etc/init/cloudwatch-logs-start.conf
              description "Configure and start CloudWatch Logs agent on Amazon ECS containerinstance"
              author "Amazon Web Services"
              start on started ecs
              script
              exec 2>>/var/log/cloudwatch-logs-start.log
              set -x
              until curl -s http://localhost:51678/v1/metadata; do sleep 1; done
              ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr-d \")
              CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn| tr -d \")
              sed -i "s|%ECS_CLUSTER|\$ECS_CLUSTER|g" /var/awslogs/etc/awslogs.conf
              sed -i "s|%CONTAINER_INSTANCE|\$CONTAINER_INSTANCE|g" /var/awslogs/etc/awslogs.conf
              chkconfig awslogs on
              service awslogs start
              end script
              EOF


              cat <<EOF > /etc/init/spot-instance-termination-notice-handler.conf
              description "Start spot instance termination handler monitoring script"
              author "Amazon Web Services"
              start on started ecs
              script
              echo \$\$ > /var/run/spot-instance-termination-notice-handler.pid
              exec /usr/local/bin/spot-instance-termination-notice-handler.sh
              end script
              pre-start script
              logger "[spot-instance-termination-notice-handler.sh]: spot instance terminationnotice handler started"
              end script
              EOF


              cat <<EOF > /usr/local/bin/spot-instance-termination-notice-handler.sh
              #!/bin/bash
              while sleep 5; do
              if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)];then
              /bin/false
              else
              logger "[spot-instance-termination-notice-handler.sh]: spot instance terminationnotice detected"
              STATUS=DRAINING
              ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr-d \")
              CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn| tr -d \")
              logger "[spot-instance-termination-notice-handler.sh]: putting instance in state\$STATUS"
              logger "[spot-instance-termination-notice-handler.sh]: running: /usr/local/bin/awsecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances\$CONTAINER_INSTANCE --status \$STATUS"
              /usr/local/bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER--container-instances \$CONTAINER_INSTANCE --status \$STATUS
              logger "[spot-instance-termination-notice-handler.sh]: running: \"/usr/local/bin/awssns publish --topic-arn ${snsTopic} --message \"Spot instance termination noticedetected. Details: cluster: \$ECS_CLUSTER, container_instance: \$CONTAINER_INSTANCE.Putting instance in state \$STATUS.\""
              /usr/local/bin/aws sns publish --topic-arn ${snsTopic} --message "Spot instancetermination notice detected. Details: cluster: \$ECS_CLUSTER, container_instance:\$CONTAINER_INSTANCE. Putting instance in state \$STATUS."
              logger "[spot-instance-termination-notice-handler.sh]: putting myself to sleep..."
              sleep 120
              fi
              done
              EOF


              chmod +x /usr/local/bin/spot-instance-termination-notice-handler.sh
              /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
              /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
  AutoScalingGroupSpot:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchConfigurationName: !Ref LaunchConfigurationSpot
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} - ECS Host
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: Pricing
          Value: Spot
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
  LaunchConfigurationSpot:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfigurationSpot
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap [ecsoptimizedami,!Ref "AWS::Region", ami]
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref spotFleetInstanceProfile
      KeyName: !Ref keyName
      SpotPrice: !Ref spotBidPrice
      SecurityGroups:
        - !Ref InstanceSG
      UserData:
            Fn::Base64: !Sub |
              #!/bin/bash -xe
              export PATH=/usr/local/bin:$PATH
              yum -y --security update
              yum -y install jq
              yum install -y aws-cfn-bootstrap
              easy_install pip
              pip install awscli
              aws configure set default.region ${AWS::Region}
              echo ECS_CLUSTER=${ecsClusterSpot} >> /etc/ecs/ecs.config
              echo ECS_ENABLE_TASK_IAM_ROLE=true >> /etc/ecs/ecs.config
              echo ECS_INSTANCE_ATTRIBUTES={\"instance-purchase-option\":\"spot\"} >> /etc/ecs/ecs.config

              cat <<EOF > /tmp/awslogs.conf

              [general]
              state_file = /var/awslogs/state/agent-state

              [/var/log/dmesg]
              file = /var/log/dmesg
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/dmesg
              initial_position = start_of_file

              [/var/log/messages]
              file = /var/log/messages
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/messages
              datetime_format = %b %d %H:%M:%S
              initial_position = start_of_file

              [/var/log/docker]
              file = /var/log/docker
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/docker
              datetime_format = %Y-%m-%dT%H:%M:%S.%f
              initial_position = start_of_file


              [/var/log/ecs/ecs-init.log]
              file = /var/log/ecs/ecs-init.log.*
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-init.log
              datetime_format = %Y-%m-%dT%H:%M:%SZ
              initial_position = start_of_file


              [/var/log/ecs/ecs-agent.log]
              file = /var/log/ecs/ecs-agent.log.*
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-agent.log
              datetime_format = %Y-%m-%dT%H:%M:%SZ
              initial_position = start_of_file


              [/var/log/ecs/audit.log]
              file = /var/log/ecs/audit.log.*
              log_group_name = ${cloudWatchLogsGroup}
              log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/audit.log
              datetime_format = %Y-%m-%dT%H:%M:%SZ
              initial_position = start_of_file
              EOF


              cd /tmp && curl -sO https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
              python /tmp/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/awslogs.conf


              cat <<EOF > /etc/init/cloudwatch-logs-start.conf
              description "Configure and start CloudWatch Logs agent on Amazon ECS containerinstance"
              author "Amazon Web Services"
              start on started ecs
              script
              exec 2>>/var/log/cloudwatch-logs-start.log
              set -x
              until curl -s http://localhost:51678/v1/metadata; do sleep 1; done
              ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr-d \")
              CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn| tr -d \")
              sed -i "s|%ECS_CLUSTER|\$ECS_CLUSTER|g" /var/awslogs/etc/awslogs.conf
              sed -i "s|%CONTAINER_INSTANCE|\$CONTAINER_INSTANCE|g" /var/awslogs/etc/awslogs.conf
              chkconfig awslogs on
              service awslogs start
              end script
              EOF


              cat <<EOF > /etc/init/spot-instance-termination-notice-handler.conf
              description "Start spot instance termination handler monitoring script"
              author "Amazon Web Services"
              start on started ecs
              script
              echo \$\$ > /var/run/spot-instance-termination-notice-handler.pid
              exec /usr/local/bin/spot-instance-termination-notice-handler.sh
              end script
              pre-start script
              logger "[spot-instance-termination-notice-handler.sh]: spot instance terminationnotice handler started"
              end script
              EOF


              cat <<EOF > /usr/local/bin/spot-instance-termination-notice-handler.sh
              #!/bin/bash
              while sleep 5; do
              if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)];then
              /bin/false
              else
              logger "[spot-instance-termination-notice-handler.sh]: spot instance terminationnotice detected"
              STATUS=DRAINING
              ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr-d \")
              CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn| tr -d \")
              logger "[spot-instance-termination-notice-handler.sh]: putting instance in state\$STATUS"
              logger "[spot-instance-termination-notice-handler.sh]: running: /usr/local/bin/awsecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances\$CONTAINER_INSTANCE --status \$STATUS"
              /usr/local/bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER--container-instances \$CONTAINER_INSTANCE --status \$STATUS
              logger "[spot-instance-termination-notice-handler.sh]: running: \"/usr/local/bin/awssns publish --topic-arn ${snsTopic} --message \"Spot instance termination noticedetected. Details: cluster: \$ECS_CLUSTER, container_instance: \$CONTAINER_INSTANCE.Putting instance in state \$STATUS.\""
              /usr/local/bin/aws sns publish --topic-arn ${snsTopic} --message "Spot instancetermination notice detected. Details: cluster: \$ECS_CLUSTER, container_instance:\$CONTAINER_INSTANCE. Putting instance in state \$STATUS."
              logger "[spot-instance-termination-notice-handler.sh]: putting myself to sleep..."
              sleep 120
              fi
              done
              EOF


              chmod +x /usr/local/bin/spot-instance-termination-notice-handler.sh
              /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfigurationSpot
              /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroupSpot
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref ALBSG
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
          - "*"
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

# IAM ROLES Start Here
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com","application-autoscaling.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: 2012-10-17
        PolicyName: !Sub ${AWS::Region}-${AWS::StackName}-taskrole
  spotFleetInstanceProfile:
    DependsOn:
    - spotFleetInstanceRole
    Properties:
      Path: /
      Roles:
      - Ref: spotFleetInstanceRole
    Type: AWS::IAM::InstanceProfile
  spotFleetInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ecs:UpdateContainerInstancesState
            Effect: Allow
            Resource: '*'
          Version: 2012-10-17
        PolicyName: !Sub ${AWS::Region}-ecsUpdateContainerInstancesStatePolicy
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: 2012-10-17
        PolicyName: !Sub ${AWS::Region}-cloudWatchLogsPolicy
      - PolicyDocument:
          Statement:
          - Action:
            - sns:Publish
            Effect: Allow
            Resource:
              Ref: snsTopic
          Version: 2012-10-17
        PolicyName: !Sub ${AWS::Region}-snsPublishPolicy
    Type: AWS::IAM::Role
  spotFleetRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
      Path: /
    Type: AWS::IAM::Role
# IAM Roles End here

  SpotService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancer
      - AutoScalingGroupSpot
    Properties:
      Cluster: !Ref ecsClusterSpot
      Role: !Ref ECSServiceRole
      DesiredCount: 4
      TaskDefinition: !Ref TaskDefinition
      PlacementStrategies:
        - Type: spread
          Field: attribute:ecs.availability-zone
        - Type: spread
          Field: attribute:instance-purchase-option
      PlacementConstraints:
        - Type: memberOf
          Expression: "attribute:instance-purchase-option == spot"
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
  OnDemandService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancer
      - AutoScalingGroup
    Properties:
      Cluster: !Ref ecsCluster
      Role: !Ref ECSServiceRole
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      PlacementStrategies:
        - Type: spread
          Field: attribute:ecs.availability-zone
        - Type: spread
          Field: attribute:instance-purchase-option
      PlacementConstraints:
        - Type: memberOf
          Expression: "attribute:instance-purchase-option == ondemand"
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      #Family: !Sub ${AWS::StackName}-simple-app
      ContainerDefinitions:
        - Name: nginx
          Image: nginx
          Essential: true
          Memory: 256
          Cpu: 256
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
          Environment:
            - Name: Tag
              Value: TagValueHere
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref cloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: nginx
      Volumes: []
      TaskRoleArn: !GetAtt TaskRole.Arn

# Task Level AutoScaling Rules Starts here
  AutoScalingSpotService:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Join [/, [service, !Ref ecsClusterSpot, !GetAtt [SpotService, Name]]]
      RoleARN: !GetAtt ECSServiceRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  AutoScalingOnDemandService:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Join [/, [service, !Ref ecsCluster, !GetAtt [OnDemandService, Name]]]
      RoleARN: !GetAtt ECSServiceRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ScalingUpPolicyOnDemandService:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-${OnDemandService}-ScalingUpPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingOnDemandService
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        StepAdjustments:
        - ScalingAdjustment: 1
          MetricIntervalLowerBound: 0
  ScalingUpPolicySpotService:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-${SpotService}-ScalingUpPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingSpotService
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        StepAdjustments:
        - ScalingAdjustment: 1
          MetricIntervalLowerBound: 0
  ScalingDownPolicyOnDemandService:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-${OnDemandService}-ScalingDownPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingOnDemandService
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        StepAdjustments:
        - ScalingAdjustment: -1
          MetricIntervalUpperBound: -20
        - ScalingAdjustment: -1
          MetricIntervalLowerBound: -20
          MetricIntervalUpperBound: -10
  ScalingDownPolicySpotService:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-${SpotService}-ScalingDownPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingSpotService
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        StepAdjustments:
        - ScalingAdjustment: -1
          MetricIntervalUpperBound: -20
        - ScalingAdjustment: -1
          MetricIntervalLowerBound: -20
          MetricIntervalUpperBound: -10
  HighCPUOnDemandServiceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPUUtilization exceeding threshold . Triggers scale up
      ActionsEnabled: true
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Unit: Percent
      Dimensions:
      - Name: ClusterName
        Value: !Ref ecsCluster
      - Name: ServiceName
        Value: !GetAtt [OnDemandService, Name]
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '80'
      AlarmActions: [!Ref ScalingUpPolicyOnDemandService]
      ComparisonOperator: GreaterThanThreshold
  HighCPUSpotServiceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPUUtilization exceeding threshold . Triggers scale up
      ActionsEnabled: true
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Unit: Percent
      Dimensions:
      - Name: ClusterName
        Value: !Ref ecsClusterSpot
      - Name: ServiceName
        Value: !GetAtt [SpotService, Name]
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '80'
      AlarmActions: [!Ref ScalingUpPolicySpotService]
      ComparisonOperator: GreaterThanThreshold
  LowCPUOnDemandServiceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPUUtilization lowers threshold . Triggers scale down
      ActionsEnabled: true
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Unit: Percent
      Dimensions:
      - Name: ClusterName
        Value: !Ref ecsCluster
      - Name: ServiceName
        Value: !GetAtt [OnDemandService, Name]
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '20'
      AlarmActions: [!Ref ScalingDownPolicyOnDemandService]
      ComparisonOperator: LessThanThreshold
  LowCPUSpotServiceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPUUtilization lowers threshold . Triggers scale down
      ActionsEnabled: true
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Unit: Percent
      Dimensions:
      - Name: ClusterName
        Value: !Ref ecsClusterSpot
      - Name: ServiceName
        Value: !GetAtt [SpotService, Name]
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '20'
      AlarmActions: [!Ref ScalingDownPolicySpotService]
      ComparisonOperator: LessThanThreshold

# Task Level AutoScaling Rules Ends here

# Cluster level AutoScaling Rules Start here

  OnDemandClusterScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 10
      ScalingAdjustment: 1
  OnDemandClusterScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 10
      ScalingAdjustment: -1
  OnDemandClusterHighMemoryUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Average Memory Utilization for the boxes in the ASG is above
        70% for 1 minutes. Triggers scale up
      ActionsEnabled: true
      Namespace: AWS/ECS
      MetricName: MemoryUtilization
      Unit: Percent
      Dimensions:
      - Name: ClusterName
        Value: !Ref ecsCluster
      Statistic: Maximum
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '50'
      AlarmActions: [!Ref 'OnDemandClusterScaleUpPolicy']
      ComparisonOperator: GreaterThanThreshold
  OnDemandClusterHighMemoryReservationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Average Memory Reservation for the boxes in the ASG is above
        70% for 3 minutes. Triggers scale up
      ActionsEnabled: true
      Namespace: AWS/ECS
      MetricName: MemoryReservation
      Unit: Percent
      Dimensions:
      - Name: ClusterName
        Value: !Ref ecsCluster
      Statistic: Maximum
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '70'
      AlarmActions: [!Ref 'OnDemandClusterScaleUpPolicy']
      ComparisonOperator: GreaterThanThreshold
  OnDemandClusterLowMemoryReservationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Average Memory Reservation for the boxes in the ASG is less.
        Triggers scale down
      ActionsEnabled: true
      Namespace: AWS/ECS
      MetricName: MemoryReservation
      Unit: Percent
      Dimensions:
      - Name: ClusterName
        Value: !Ref ecsCluster
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '10'
      Threshold: '25'
      AlarmActions: [!Ref 'OnDemandClusterScaleDownPolicy']
      ComparisonOperator: LessThanThreshold

# Cluster level AutoScaling Rules End here

# VPC Required to Run Cluster Starts here
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Ref Environment
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Environment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '']
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.32.0/27
      Tags:
        - Key: Name
          Value: !Sub ${Environment} (Public)
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '']
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.64.0/27
      Tags:
        - Key: Name
          Value: !Sub ${Environment} (Public)
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref Environment
  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2

# VPC Required to Run Cluster Ends here
Outputs:
  AutoScalingSpotService:
    Value: !Ref AutoScalingSpotService
  AutoScalingOnDemandService:
    Value: !Ref AutoScalingOnDemandService
